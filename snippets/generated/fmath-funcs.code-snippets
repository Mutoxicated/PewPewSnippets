// Auto-generated Fmath funcs from ppl-utils (https://github.com/pewpewlive/ppl-utils)
{
  "abs_fixedpoint": {
    "description": "Returns the absolute value.",
    "body": "fmath.abs_fixedpoint(${1:value})",
    "prefix": "fmath.abs_fixedpoint"
  },
  "sincos": {
    "description": "Returns the sinus and cosinus of `angle`. `angle` is in radian.",
    "body": "fmath.sincos(${1:angle})",
    "prefix": "fmath.sincos"
  },
  "from_fraction": {
    "description": "Returns the fixedpoint value representing the fraction `numerator`/`denominator`. `denominator` must not be equal to zero.",
    "body": "fmath.from_fraction(${1:numerator}, ${2:denominator})",
    "prefix": "fmath.from_fraction"
  },
  "sqrt": {
    "description": "Returns the square root of `x`. `x` must be greater or equal to 0.",
    "body": "fmath.sqrt(${1:x})",
    "prefix": "fmath.sqrt"
  },
  "to_fixedpoint": {
    "description": "Returns a fixedpoint value with the integral part of `value`, and no fractional part.",
    "body": "fmath.to_fixedpoint(${1:value})",
    "prefix": "fmath.to_fixedpoint"
  },
  "atan2": {
    "description": "Returns the principal value of the arc tangent of y/x. Returns a value in the range [0, 2π[.",
    "body": "fmath.atan2(${1:y}, ${2:x})",
    "prefix": "fmath.atan2"
  },
  "max_fixedpoint": {
    "description": "Returns the maximum value a fixedpoint integer can take.",
    "body": "fmath.max_fixedpoint()",
    "prefix": "fmath.max_fixedpoint"
  },
  "random_fixedpoint": {
    "description": "Returns a random fixedpoint value in the range [`min`, `max`]. `max` must be greater or equal to `min`.",
    "body": "fmath.random_fixedpoint(${1:min}, ${2:max})",
    "prefix": "fmath.random_fixedpoint"
  },
  "to_int": {
    "description": "Returns the integral part of the `value`.",
    "body": "fmath.to_int(${1:value})",
    "prefix": "fmath.to_int"
  },
  "random_int": {
    "description": "Returns an integer in the range [`min`, `max`]. `max` must be greater or equal to `min`.",
    "body": "fmath.random_int(${1:min}, ${2:max})",
    "prefix": "fmath.random_int"
  },
  "tau": {
    "description": "Returns τ (aka 2π).",
    "body": "fmath.tau()",
    "prefix": "fmath.tau"
  }
}
